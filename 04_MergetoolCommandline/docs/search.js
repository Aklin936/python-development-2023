window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cowsay", "modulename": "cowsay", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.Option", "modulename": "cowsay", "qualname": "Option", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cowsay.Option.__init__", "modulename": "cowsay", "qualname": "Option.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">eyes</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;oo&#39;</span>, </span><span class=\"param\"><span class=\"n\">tongue</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;  &#39;</span></span>)</span>"}, {"fullname": "cowsay.Bubble", "modulename": "cowsay", "qualname": "Bubble", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "cowsay.Bubble.__init__", "modulename": "cowsay", "qualname": "Bubble.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tr</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ml</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mr</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">br</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span></span>)</span>"}, {"fullname": "cowsay.read_dot_cow", "modulename": "cowsay", "qualname": "read_dot_cow", "kind": "function", "doc": "<p>Reads and parses a .cow file to a string. Unescapes characters in doing\nso. This function will search for a heredoc in the .cow file. If found,\nit will extract the cow in the heredoc, otherwise the whole file is used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong>:  The File to read from</li>\n<li><strong>escapes</strong>:  A dictionary mapping escape codes to their respective\ncharacters</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The cow</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\">f: &lt;class &#x27;TextIO&#x27;&gt;, </span><span class=\"param\"><span class=\"n\">escapes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.list_cows", "modulename": "cowsay", "qualname": "list_cows", "kind": "function", "doc": "<p>Lists all cow file names in the given directory</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cow_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;/home/neil/\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b/python/python-development-2023/04_MergetoolCommandline/env03/lib/python3.10/site-packages/cowsay/cows&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.get_random_cow", "modulename": "cowsay", "qualname": "get_random_cow", "kind": "function", "doc": "<p>Searches the given dir for all .cow files and returns the name of a\nrandom one</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;/home/neil/\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b/python/python-development-2023/04_MergetoolCommandline/env03/lib/python3.10/site-packages/cowsay/cows&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.get_cow", "modulename": "cowsay", "qualname": "get_cow", "kind": "function", "doc": "<p>Retrieves the cowfile text from the cowfile with the corresponding cow name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cow</span>,</span><span class=\"param\">\t<span class=\"n\">cow_path</span><span class=\"o\">=</span><span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;/home/neil/\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b/python/python-development-2023/04_MergetoolCommandline/env03/lib/python3.10/site-packages/cowsay/cows&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.build_cow", "modulename": "cowsay", "qualname": "build_cow", "kind": "function", "doc": "<p>Takes a string representing a cow and adds the message bubble, thoughts,\neyes, and tongue. $thoughts, $eyes, $tongue if present will be replaced\nwith their corresponding strings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>the_cow</strong>:  A string representing a cow. Characters are not escaped</li>\n<li><strong>cow_config</strong>:  An Option object defining the eyes, thoughts, and tongue</li>\n<li><strong>thought_config</strong>:  A thought option defining the text bubble chars</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The formatted cow</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">the_cow</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cow_config</span><span class=\"p\">:</span> <span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">Option</span>,</span><span class=\"param\">\t<span class=\"n\">thought_config</span><span class=\"p\">:</span> <span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">Bubble</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">wrap_text</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.fit_text", "modulename": "cowsay", "qualname": "fit_text", "kind": "function", "doc": "<p>Wraps each paragraph in the given text to the specified width and pads\neach line such that they are all the same length with at least one space\nof padding. If wrap_text is False, paragraphs are not wrapped but are\nstill padded with spaces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">wrap_text</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.pad_lines", "modulename": "cowsay", "qualname": "pad_lines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.wrap_bubble", "modulename": "cowsay", "qualname": "wrap_bubble", "kind": "function", "doc": "<p>Puts text into a text bubble. This is done by just inserting the given\nbracket characters onto the ends of each line.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lines</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">cowsay</span><span class=\"o\">.</span><span class=\"n\">Bubble</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.make_bubble", "modulename": "cowsay", "qualname": "make_bubble", "kind": "function", "doc": "<p>Wraps text is wrap_text is true, then pads text and sets inside a bubble.\nThis is the text that appears above the cows</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">brackets</span><span class=\"o\">=</span><span class=\"n\">Bubble</span><span class=\"p\">(</span><span class=\"n\">stem</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">tl</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">tr</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">ml</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">mr</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">bl</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">br</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">wrap_text</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.cowsay", "modulename": "cowsay", "qualname": "cowsay", "kind": "function", "doc": "<p>Similar to the cowsay command. Parameters are listed with their\ncorresponding options in the cowsay command. Returns the resulting cowsay\nstring</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The message to be displayed</li>\n<li><strong>cow</strong>:  -f \u2013 the available cows can be found by calling list_cows</li>\n<li><strong>preset</strong>:  -[bdgpstwy]</li>\n<li><strong>eyes</strong>:  -e or eye_string</li>\n<li><strong>tongue</strong>:  -T or tongue_string</li>\n<li><strong>width</strong>:  -W</li>\n<li><strong>wrap_text</strong>:  -n</li>\n<li><strong>cowfile</strong>:  a string containing the cow file text (chars are not\ndecoded as they are in read_dot_cow) if this parameter is provided the\ncow parameter is ignored</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span>,</span><span class=\"param\">\t<span class=\"n\">cow</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">eyes</span><span class=\"o\">=</span><span class=\"s1\">&#39;oo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tongue</span><span class=\"o\">=</span><span class=\"s1\">&#39;  &#39;</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">wrap_text</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cowfile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.cowthink", "modulename": "cowsay", "qualname": "cowthink", "kind": "function", "doc": "<p>Similar to the cowthink command. Parameters are listed with their\ncorresponding options in the cowthink command. Returns the resulting\ncowthink string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The message to be displayed</li>\n<li><strong>cow</strong>:  -f \u2013 the available cows can be found by calling list_cows</li>\n<li><strong>preset</strong>:  -[bdgpstwy]</li>\n<li><strong>eyes</strong>:  -e or eye_string</li>\n<li><strong>tongue</strong>:  -T or tongue_string</li>\n<li><strong>width</strong>:  -W</li>\n<li><strong>wrap_text</strong>:  -n</li>\n<li><strong>cowfile</strong>:  a string containing the cow file text (chars are not\ndecoded as they are in read_dot_cow) if this parameter is provided the\ncow parameter is ignored</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span>,</span><span class=\"param\">\t<span class=\"n\">cow</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">eyes</span><span class=\"o\">=</span><span class=\"s1\">&#39;oo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tongue</span><span class=\"o\">=</span><span class=\"s1\">&#39;  &#39;</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">wrap_text</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cowfile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cowsay.characters", "modulename": "cowsay.characters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.main", "modulename": "cowsay.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.main.wrap_lines", "modulename": "cowsay.main", "qualname": "wrap_lines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lines</span>, </span><span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"mi\">49</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.generate_bubble", "modulename": "cowsay.main", "qualname": "generate_bubble", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.generate_char", "modulename": "cowsay.main", "qualname": "generate_char", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">char</span>, </span><span class=\"param\"><span class=\"n\">text_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.draw", "modulename": "cowsay.main", "qualname": "draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">char</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">to_console</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.get_output_string", "modulename": "cowsay.main", "qualname": "get_output_string", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">char_name</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.cli", "modulename": "cowsay.main", "qualname": "cli", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.func", "modulename": "cowsay.main", "qualname": "func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">      </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">       </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">        .--.</span><span class=\"se\">\\n</span><span class=\"s2\">       |o_o |</span><span class=\"se\">\\n</span><span class=\"s2\">       |:_/ |</span><span class=\"se\">\\n</span><span class=\"s2\">      //   </span><span class=\"se\">\\\\</span><span class=\"s2\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">     (|     | )</span><span class=\"se\">\\n</span><span class=\"s2\">    /&#39;</span><span class=\"se\">\\\\</span><span class=\"s2\">_   _/`</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">    </span><span class=\"se\">\\\\</span><span class=\"s2\">___)=(___/</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.beavis", "modulename": "cowsay.main", "qualname": "beavis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">      </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">       </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">             _------~~-,</span><span class=\"se\">\\n</span><span class=\"s2\">          ,&#39;            ,</span><span class=\"se\">\\n</span><span class=\"s2\">          /               </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">         /                :</span><span class=\"se\">\\n</span><span class=\"s2\">        |                  &#39;</span><span class=\"se\">\\n</span><span class=\"s2\">        |                  |</span><span class=\"se\">\\n</span><span class=\"s2\">        |                  |</span><span class=\"se\">\\n</span><span class=\"s2\">         |   _--           |</span><span class=\"se\">\\n</span><span class=\"s2\">         _| =-.     .-.   ||</span><span class=\"se\">\\n</span><span class=\"s2\">         o|/o/       _.   |</span><span class=\"se\">\\n</span><span class=\"s2\">         /  ~          </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\"> |</span><span class=\"se\">\\n</span><span class=\"s2\">       (____</span><span class=\"se\">\\\\</span><span class=\"s2\">@)  ___~    |</span><span class=\"se\">\\n</span><span class=\"s2\">          |_===~~~.`    |</span><span class=\"se\">\\n</span><span class=\"s2\">       _______.--~     |</span><span class=\"se\">\\n</span><span class=\"s2\">       </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">________       |</span><span class=\"se\">\\n</span><span class=\"s2\">                </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">      |</span><span class=\"se\">\\n</span><span class=\"s2\">              __/-___-- -__</span><span class=\"se\">\\n</span><span class=\"s2\">             /            _ </span><span class=\"se\">\\\\\\\\\\n\\n</span><span class=\"s2\">&quot;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.cheese", "modulename": "cowsay.main", "qualname": "cheese", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     /     </span><span class=\"se\">\\\\</span><span class=\"s1\">_/         |</span><span class=\"se\">\\n</span><span class=\"s1\">    |                 ||</span><span class=\"se\">\\n</span><span class=\"s1\">    |                 ||</span><span class=\"se\">\\n</span><span class=\"s1\">   |    ###</span><span class=\"se\">\\\\</span><span class=\"s1\">  /###   | |</span><span class=\"se\">\\n</span><span class=\"s1\">   |     0  </span><span class=\"se\">\\\\</span><span class=\"s1\">/  0    | |</span><span class=\"se\">\\n</span><span class=\"s1\">  /|                 | |</span><span class=\"se\">\\n</span><span class=\"s1\"> / |        &lt;        |</span><span class=\"se\">\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">| /|                 | | |</span><span class=\"se\">\\n</span><span class=\"s1\">| |     </span><span class=\"se\">\\\\</span><span class=\"s1\">_______/   |  | |</span><span class=\"se\">\\n</span><span class=\"s1\">| |                 | / /</span><span class=\"se\">\\n</span><span class=\"s1\">/||                 /|||</span><span class=\"se\">\\n</span><span class=\"s1\">   ----------------|</span><span class=\"se\">\\n</span><span class=\"s1\">        | |    | |</span><span class=\"se\">\\n</span><span class=\"s1\">        ***    ***</span><span class=\"se\">\\n</span><span class=\"s1\">       /___</span><span class=\"se\">\\\\</span><span class=\"s1\">  /___</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.daemon", "modulename": "cowsay.main", "qualname": "daemon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">        </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">           </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">            /- _  `-/  &#39;</span><span class=\"se\">\\n</span><span class=\"s2\">           (/</span><span class=\"se\">\\\\</span><span class=\"s2\">/ </span><span class=\"se\">\\\\</span><span class=\"s2\"> </span><span class=\"se\">\\\\</span><span class=\"s2\">   /</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">           / /   | `    </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">           O O   ) /    |</span><span class=\"se\">\\n</span><span class=\"s2\">           `-^--&#39;`&lt;     &#39;</span><span class=\"se\">\\n</span><span class=\"s2\">          (_.)  _  )   /</span><span class=\"se\">\\n</span><span class=\"s2\">           `.___/`    /</span><span class=\"se\">\\n</span><span class=\"s2\">             `-----&#39; /</span><span class=\"se\">\\n</span><span class=\"s2\">&lt;----.     __ / __   </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&lt;----|====O)))==) </span><span class=\"se\">\\\\</span><span class=\"s2\">) /====</span><span class=\"se\">\\n</span><span class=\"s2\">&lt;----&#39;    `--&#39; `.__,&#39; </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">             |        |</span><span class=\"se\">\\n</span><span class=\"s2\">              </span><span class=\"se\">\\\\</span><span class=\"s2\">       /</span><span class=\"se\">\\n</span><span class=\"s2\">        ______( (_  / </span><span class=\"se\">\\\\</span><span class=\"s2\">______</span><span class=\"se\">\\n</span><span class=\"s2\">      ,&#39;  ,-----&#39;   |        </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">      `--{__________)        </span><span class=\"se\">\\\\</span><span class=\"s2\">/</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.cow", "modulename": "cowsay.main", "qualname": "cow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   ^__^</span><span class=\"se\">\\n</span><span class=\"s1\">   (oo)</span><span class=\"se\">\\\\</span><span class=\"s1\">_______</span><span class=\"se\">\\n</span><span class=\"s1\">   (__)</span><span class=\"se\">\\\\</span><span class=\"s1\">       )</span><span class=\"se\">\\\\</span><span class=\"s1\">/</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">       ||----w |</span><span class=\"se\">\\n</span><span class=\"s1\">       ||     ||</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.dragon", "modulename": "cowsay.main", "qualname": "dragon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">    </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">                           / </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">  //</span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">            |</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">___/|      /   </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">//  </span><span class=\"se\">\\\\\\\\\\\\\\\\\\n</span><span class=\"s2\">            /0  0  </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">__  /    //  | </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\"> </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">           /     /  </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">/_/    //   |  </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">  </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">           </span><span class=\"se\">\\\\</span><span class=\"s2\">@_^_</span><span class=\"se\">\\\\</span><span class=\"s2\">@&#39;/   </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">/_   //    |   </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">   </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">           //_^_/     </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">/_ //     |    </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">    </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">        ( //) |        </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">///      |     </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">     </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">      ( / /) _|_ /   )  //       |      </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">     _</span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">    ( // /) &#39;/,_ _ _/  ( ; -.    |    _ _</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">.-~        .-~~~^-.</span><span class=\"se\">\\n</span><span class=\"s2\">  (( / / )) ,-{        _      `-.|.-~-.           .~         `.</span><span class=\"se\">\\n</span><span class=\"s2\"> (( // / ))  &#39;/</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">      /                 ~-. _ .-~      .-~^-.  </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\"> (( /// ))      `.   {            }                   /      </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">  </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s2\">  (( / ))     .----~-.</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">        </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">-&#39;                 .~         </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">  `. </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">^-.</span><span class=\"se\">\\n</span><span class=\"s2\">             ///.----..&gt;        </span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">             _ -~             `.  ^-`  ^-_</span><span class=\"se\">\\n</span><span class=\"s2\">               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~</span><span class=\"se\">\\n</span><span class=\"s2\">                                                                  /.-~</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.fox", "modulename": "cowsay.main", "qualname": "fox", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    |</span><span class=\"se\">\\\\</span><span class=\"s1\">_/|,,_____,~~`</span><span class=\"se\">\\n</span><span class=\"s1\">    (.&quot;.)~~     )`~}}</span><span class=\"se\">\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">o/</span><span class=\"se\">\\\\</span><span class=\"s1\"> /---~</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> ~}}</span><span class=\"se\">\\n</span><span class=\"s1\">       _//    _// ~}</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.ghostbusters", "modulename": "cowsay.main", "qualname": "ghostbusters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">           </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                       __---__</span><span class=\"se\">\\n</span><span class=\"s1\">                    _-       /--______</span><span class=\"se\">\\n</span><span class=\"s1\">               __--( /     </span><span class=\"se\">\\\\</span><span class=\"s1\"> )XXXXXXXXXXX</span><span class=\"se\">\\\\</span><span class=\"s1\">v.</span><span class=\"se\">\\n</span><span class=\"s1\">             .-XXX(   O   O  )XXXXXXXXXXXXXXX-</span><span class=\"se\">\\n</span><span class=\"s1\">            /XXX(       U     )        XXXXXXX</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">          /XXXXX(              )--_  XXXXXXXXXXX</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         /XXXXX/ (      O     )   XXXXXX   </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXX</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         XXXXX/   /            XXXXXX   </span><span class=\"se\">\\\\</span><span class=\"s1\">__ </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXX</span><span class=\"se\">\\n</span><span class=\"s1\">         XXXXXX__/          XXXXXX         </span><span class=\"se\">\\\\</span><span class=\"s1\">__----&gt;</span><span class=\"se\">\\n</span><span class=\"s1\"> ---___  XXX__/          XXXXXX      </span><span class=\"se\">\\\\</span><span class=\"s1\">__         /</span><span class=\"se\">\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\</span><span class=\"s1\">-  --__/   ___/</span><span class=\"se\">\\\\</span><span class=\"s1\">  XXXXXX            /  ___--/=</span><span class=\"se\">\\n</span><span class=\"s1\">    </span><span class=\"se\">\\\\</span><span class=\"s1\">-</span><span class=\"se\">\\\\</span><span class=\"s1\">    ___/    XXXXXX              </span><span class=\"se\">\\&#39;</span><span class=\"s1\">--- XXXXXX</span><span class=\"se\">\\n</span><span class=\"s1\">       </span><span class=\"se\">\\\\</span><span class=\"s1\">-</span><span class=\"se\">\\\\</span><span class=\"s1\">/XXX</span><span class=\"se\">\\\\</span><span class=\"s1\"> XXXXXX                      /XXXXX</span><span class=\"se\">\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXXXXXX   </span><span class=\"se\">\\\\</span><span class=\"s1\">                    /XXXXX/</span><span class=\"se\">\\n</span><span class=\"s1\">          </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXXX      &gt;                 _/XXXXX/</span><span class=\"se\">\\n</span><span class=\"s1\">            </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXX--__/              __-- XXXX/</span><span class=\"se\">\\n</span><span class=\"s1\">             -XXXXXXXX---------------  XXXXXX-</span><span class=\"se\">\\n</span><span class=\"s1\">                </span><span class=\"se\">\\\\</span><span class=\"s1\">XXXXXXXXXXXXXXXXXXXXXXXXXX/</span><span class=\"se\">\\n</span><span class=\"s1\">                  &quot;&quot;VXXXXXXXXXXXXXXXXXXV&quot;&quot;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.kitty", "modulename": "cowsay.main", "qualname": "kitty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">      </span><span class=\"se\">\\\\\\n\\n</span><span class=\"s1\">       (&quot;`-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  </span><span class=\"se\">\\&#39;</span><span class=\"s1\">-/&quot;) .___..--</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> </span><span class=\"se\">\\&#39;</span><span class=\"s1\"> &quot;`-._</span><span class=\"se\">\\n</span><span class=\"s1\">        ` *_ *  )    `-.   (      ) .`-.__. `)</span><span class=\"se\">\\n</span><span class=\"s1\">         (_Y_.) </span><span class=\"se\">\\&#39;</span><span class=\"s1\"> ._   )   `._` ;  `` -. .-</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">      _.. `--</span><span class=\"se\">\\&#39;</span><span class=\"s1\">_..-_/   /--</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> _ .</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> ,4</span><span class=\"se\">\\n</span><span class=\"s1\">     ( i l ),-</span><span class=\"se\">\\&#39;\\&#39;</span><span class=\"s1\">  ( l i),</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  ( ( ! .-</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.meow", "modulename": "cowsay.main", "qualname": "meow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                  _ ___.--</span><span class=\"se\">\\&#39;\\&#39;\\&#39;</span><span class=\"s1\">`--</span><span class=\"se\">\\&#39;\\&#39;</span><span class=\"s1\">//-,-_--_.</span><span class=\"se\">\\n</span><span class=\"s1\">      </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">`&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> ` || </span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s1\">/ / // / ,-</span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s1\">`,_</span><span class=\"se\">\\n</span><span class=\"s1\">     /</span><span class=\"se\">\\&#39;</span><span class=\"s1\">`  </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> || Y  | </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">|/ / // / - |__ `-,</span><span class=\"se\">\\n</span><span class=\"s1\">    /</span><span class=\"se\">\\\\</span><span class=\"s1\">@&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">  ` </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> `</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> |  | ||/ // | </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">/  </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">  `-._`-,_.,</span><span class=\"se\">\\n</span><span class=\"s1\">   /  _.-. `.-</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">,___/</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> _/|_/_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">/|_/ |     `-._._)</span><span class=\"se\">\\n</span><span class=\"s1\">   `-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">``/  /  |  // </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__/</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__  /  </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__/ </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s1\">        `-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  /-</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">/  | -|   </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__ </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">   |-</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> |</span><span class=\"se\">\\n</span><span class=\"s1\">          __/</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\"> / _/ </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">/ __,-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">   ) ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> _|</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">         (((__/(((_.</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> ((___..-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">((__,</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.miki", "modulename": "cowsay.main", "qualname": "miki", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\</span><span class=\"s1\">                                                      </span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\</span><span class=\"s1\">                  &amp;************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\</span><span class=\"s1\">             &amp;******************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\</span><span class=\"s1\">          &amp;**********************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">            &amp;**************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">          &amp;*****************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">         &amp;*******************************************&amp; </span><span class=\"se\">\\n</span><span class=\"s1\">        &amp;*********************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">       &amp;***********************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;************************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;***#########********#########*******************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;*##       ##########          ##################&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;*##   O   ##@**####   O       ##***************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;***#########@*******#########*****************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;***********@*********************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;**********@*********************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;*********@*********************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">      &amp;********@@*********************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">       &amp;*******@@@@@@****************************&amp;   </span><span class=\"se\">\\n</span><span class=\"s1\">        &amp;**************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">          &amp;**************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">           &amp;******@@@@@@@@@@@@*********************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">             &amp;*************************************&amp;   </span><span class=\"se\">\\n</span><span class=\"s1\">               &amp;************************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">                     &amp;*******************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">                       &amp;*****************************&amp;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.milk", "modulename": "cowsay.main", "qualname": "milk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">       ____________</span><span class=\"se\">\\n</span><span class=\"s1\">       |__________|</span><span class=\"se\">\\n</span><span class=\"s1\">      /           /</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     /           /  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    /___________/___/|</span><span class=\"se\">\\n</span><span class=\"s1\">    |          |     |</span><span class=\"se\">\\n</span><span class=\"s1\">    |  ==</span><span class=\"se\">\\\\</span><span class=\"s1\"> /== |     |</span><span class=\"se\">\\n</span><span class=\"s1\">    |   O   O  | </span><span class=\"se\">\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\</span><span class=\"s1\"> |</span><span class=\"se\">\\n</span><span class=\"s1\">    |     &lt;    |  </span><span class=\"se\">\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\</span><span class=\"s1\">|</span><span class=\"se\">\\n</span><span class=\"s1\">   /|          |   </span><span class=\"se\">\\\\</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  / |  </span><span class=\"se\">\\\\</span><span class=\"s1\">_____/ |   / /</span><span class=\"se\">\\n</span><span class=\"s1\"> / /|          |  / /|</span><span class=\"se\">\\n</span><span class=\"s1\">/||</span><span class=\"se\">\\\\</span><span class=\"s1\">|          | /||</span><span class=\"se\">\\\\</span><span class=\"s1\">/</span><span class=\"se\">\\n</span><span class=\"s1\">    -------------|</span><span class=\"se\">\\n</span><span class=\"s1\">        | |    | |</span><span class=\"se\">\\n</span><span class=\"s1\">       &lt;__/    </span><span class=\"se\">\\\\</span><span class=\"s1\">__&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.pig", "modulename": "cowsay.main", "qualname": "pig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\\\\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">             ,.</span><span class=\"se\">\\n</span><span class=\"s1\">            (_|,.</span><span class=\"se\">\\n</span><span class=\"s1\">            ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> /, )_______   _</span><span class=\"se\">\\n</span><span class=\"s1\">        __j o``-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">        `.</span><span class=\"se\">\\&#39;</span><span class=\"s1\">-)</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">        (&quot;)                 </span><span class=\"se\">\\\\\\&#39;\\n</span><span class=\"s1\">        `-j                |</span><span class=\"se\">\\n</span><span class=\"s1\">          `-._(           /</span><span class=\"se\">\\n</span><span class=\"s1\">             |_</span><span class=\"se\">\\\\</span><span class=\"s1\">  |--^.  /</span><span class=\"se\">\\n</span><span class=\"s1\">            /_]</span><span class=\"se\">\\&#39;</span><span class=\"s1\">|_| /_)_/</span><span class=\"se\">\\n</span><span class=\"s1\">                /_]</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  /_]</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.stegosaurus", "modulename": "cowsay.main", "qualname": "stegosaurus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">      </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">       </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                            .       .</span><span class=\"se\">\\n</span><span class=\"s1\">                           / `.   .</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                   .---.  &lt;    &gt; &lt;    &gt;  .---.</span><span class=\"se\">\\n</span><span class=\"s1\">                   |    </span><span class=\"se\">\\\\</span><span class=\"s1\">  </span><span class=\"se\">\\\\</span><span class=\"s1\"> - ~ ~ - /  /    |</span><span class=\"se\">\\n</span><span class=\"s1\">       _____        ~-..-~             ~-..-~</span><span class=\"se\">\\n</span><span class=\"s1\">      |     |   </span><span class=\"se\">\\\\</span><span class=\"s1\">~~~</span><span class=\"se\">\\\\</span><span class=\"s1\">.</span><span class=\"se\">\\&#39;</span><span class=\"s1\">                    `./~~~/</span><span class=\"se\">\\n</span><span class=\"s1\">     ---------   </span><span class=\"se\">\\\\</span><span class=\"s1\">__/                        </span><span class=\"se\">\\\\</span><span class=\"s1\">__/</span><span class=\"se\">\\n</span><span class=\"s1\">    .</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  O    </span><span class=\"se\">\\\\</span><span class=\"s1\">     /               /       </span><span class=\"se\">\\\\</span><span class=\"s1\">  &quot;</span><span class=\"se\">\\n</span><span class=\"s1\">   (_____,    `._.</span><span class=\"se\">\\&#39;</span><span class=\"s1\">               |         }  </span><span class=\"se\">\\\\</span><span class=\"s1\">/~~~/</span><span class=\"se\">\\n</span><span class=\"s1\">    `----.          /       }     |        /    </span><span class=\"se\">\\\\</span><span class=\"s1\">__/</span><span class=\"se\">\\n</span><span class=\"s1\">          `-.      |       /      |       /      `. ,~~|</span><span class=\"se\">\\n</span><span class=\"s1\">              ~-.__|      /_ - ~ ^|      /- _      `..-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">   f:  f:</span><span class=\"se\">\\n</span><span class=\"s1\">                   |     /        |     /     ~-.     `-. _|| _||_</span><span class=\"se\">\\n</span><span class=\"s1\">                   |_____|        |_____|         ~ - . _ _ _ _ __&gt;</span><span class=\"se\">\\n\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.stimpy", "modulename": "cowsay.main", "qualname": "stimpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">        .    _  .</span><span class=\"se\">\\n</span><span class=\"s1\">       |</span><span class=\"se\">\\\\</span><span class=\"s1\">_|/__/|</span><span class=\"se\">\\n</span><span class=\"s1\">       / / </span><span class=\"se\">\\\\</span><span class=\"s1\">/ </span><span class=\"se\">\\\\</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">      /__|O||O|__ </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     |/_ </span><span class=\"se\">\\\\</span><span class=\"s1\">_/</span><span class=\"se\">\\\\</span><span class=\"s1\">_/ _</span><span class=\"se\">\\\\</span><span class=\"s1\"> |</span><span class=\"se\">\\n</span><span class=\"s1\">     | | (____) | ||</span><span class=\"se\">\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">/</span><span class=\"se\">\\\\</span><span class=\"s1\">___/</span><span class=\"se\">\\\\</span><span class=\"s1\">__/  //</span><span class=\"se\">\\n</span><span class=\"s1\">     (_/         ||</span><span class=\"se\">\\n</span><span class=\"s1\">      |          ||</span><span class=\"se\">\\n</span><span class=\"s1\">      |          ||</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">       </span><span class=\"se\">\\\\</span><span class=\"s1\">        //_/</span><span class=\"se\">\\n</span><span class=\"s1\">        </span><span class=\"se\">\\\\</span><span class=\"s1\">______//</span><span class=\"se\">\\n</span><span class=\"s1\">       __ || __||</span><span class=\"se\">\\n</span><span class=\"s1\">      (____(____)</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.trex", "modulename": "cowsay.main", "qualname": "trex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">       </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">             .-=-==--==--.</span><span class=\"se\">\\n</span><span class=\"s1\">       ..-==&quot;  ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">o`)      `.</span><span class=\"se\">\\n</span><span class=\"s1\">     ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">         `&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    :  (                     `.__...._</span><span class=\"se\">\\n</span><span class=\"s1\">    |                  )    /         `-=-.</span><span class=\"se\">\\n</span><span class=\"s1\">    :       ,vv.-._   /    /               `---==-._</span><span class=\"se\">\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">/</span><span class=\"se\">\\\\</span><span class=\"s1\">/</span><span class=\"se\">\\\\</span><span class=\"s1\">/VV ^ d88`;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">    /                         `.</span><span class=\"se\">\\n</span><span class=\"s1\">         ``  ^/d88P!</span><span class=\"se\">\\&#39;</span><span class=\"s1\">    /             ,              `._</span><span class=\"se\">\\n</span><span class=\"s1\">            ^/    !</span><span class=\"se\">\\&#39;</span><span class=\"s1\">   ,.      ,      /                  &quot;-,,__,,--</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&quot;&quot;&quot;&quot;-.</span><span class=\"se\">\\n</span><span class=\"s1\">           ^/    !</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">  </span><span class=\"se\">\\\\</span><span class=\"s1\"> . .(      (         _           )  ) ) ) ))_,-.</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">          ^(__ ,!</span><span class=\"se\">\\&#39;</span><span class=\"s1\">,&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">   ;:+.:%:a.     </span><span class=\"se\">\\\\</span><span class=\"s1\">:.. . ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">          )  )  ) ) ,&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">    </span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">          </span><span class=\"se\">\\&#39;</span><span class=\"s1\">,,,</span><span class=\"se\">\\&#39;\\&#39;</span><span class=\"s1\">,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">     /o:::&quot;:%:</span><span class=\"si\">%a</span><span class=\"s1\">.    </span><span class=\"se\">\\\\</span><span class=\"s1\">:.:.:         .    )  ) _,</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">           &quot;&quot;&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">       ;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">:::</span><span class=\"se\">\\&#39;\\&#39;</span><span class=\"s1\"> `+</span><span class=\"si\">%%%a</span><span class=\"s1\">._  </span><span class=\"se\">\\\\</span><span class=\"s1\">%:%|         ;.). _,-&quot;&quot;</span><span class=\"se\">\\n</span><span class=\"s1\">                  ,-=</span><span class=\"se\">\\&#39;</span><span class=\"s1\">_.-</span><span class=\"se\">\\&#39;</span><span class=\"s1\">      ``:%::)  )%:|        /:._,&quot;</span><span class=\"se\">\\n</span><span class=\"s1\">                 (/(/&quot;           ,&quot; ,</span><span class=\"se\">\\&#39;</span><span class=\"s1\">_,</span><span class=\"se\">\\&#39;</span><span class=\"si\">%%</span><span class=\"s1\">%:       (_,</span><span class=\"se\">\\&#39;\\n</span><span class=\"s1\">                                (  (//(`.___;        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                 </span><span class=\"se\">\\\\</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">    `         `</span><span class=\"se\">\\n</span><span class=\"s1\">                                  `.    `.   `.        :</span><span class=\"se\">\\n</span><span class=\"s1\">                                    </span><span class=\"se\">\\\\</span><span class=\"s1\">. . .</span><span class=\"se\">\\\\</span><span class=\"s1\">    : . . . :</span><span class=\"se\">\\n</span><span class=\"s1\">                                     </span><span class=\"se\">\\\\</span><span class=\"s1\">. . .:    `.. . .:</span><span class=\"se\">\\n</span><span class=\"s1\">                                      `..:.:</span><span class=\"se\">\\\\</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">:...</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                       ;:.:.;      ::...:</span><span class=\"se\">\\n</span><span class=\"s1\">                                       ):%::       :::::;</span><span class=\"se\">\\n</span><span class=\"s1\">                                   __,::%:(        :::::</span><span class=\"se\">\\n</span><span class=\"s1\">                                ,;:</span><span class=\"si\">%%%%%%</span><span class=\"s1\">%:        ;:%::</span><span class=\"se\">\\n</span><span class=\"s1\">                                  ;,--&quot;&quot;-.`</span><span class=\"se\">\\\\</span><span class=\"s1\">  ,=--</span><span class=\"se\">\\&#39;</span><span class=\"s1\">:%:%:</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                 /&quot;       &quot;| /-&quot;.:</span><span class=\"si\">%%%%%%</span><span class=\"s1\">%</span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                                 ;,-&quot;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">`)</span><span class=\"si\">%%</span><span class=\"s1\">)</span><span class=\"se\">\\n</span><span class=\"s1\">                                                /&quot;      &quot;|</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.turkey", "modulename": "cowsay.main", "qualname": "turkey", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">           </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                             ,+*^^*+___+++_</span><span class=\"se\">\\n</span><span class=\"s1\">                                       ,*^^^^              )</span><span class=\"se\">\\n</span><span class=\"s1\">                                    _+*                     ^**+_</span><span class=\"se\">\\n</span><span class=\"s1\">                                  +^       _ _++*+_+++_,         )</span><span class=\"se\">\\n</span><span class=\"s1\">              _+^^*+_    (     ,+*^ ^          </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">+_        )</span><span class=\"se\">\\n</span><span class=\"s1\">             {       )  (    ,(    ,_+--+--,      ^)      ^</span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s1\">            { (</span><span class=\"se\">\\\\</span><span class=\"s1\">@)    } f   ,(  ,+-^ __*_*_  ^^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_   ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">       )</span><span class=\"se\">\\n</span><span class=\"s1\">           {:;-/    (_+*-+^^^^^+*+*&lt;_ _++_)_    )    )      /</span><span class=\"se\">\\n</span><span class=\"s1\">          ( /  (    (        ,___    ^*+_+* )   &lt;    &lt;      </span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s1\">           U _/     )    *--&lt;  ) ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">-----++__)   )    )       )</span><span class=\"se\">\\n</span><span class=\"s1\">            (      )  _(^)^^))  )  )</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^^^^^))^*+/    /       /</span><span class=\"se\">\\n</span><span class=\"s1\">          (      /  (_))_^)) )  )  ))^^^^^))^^^)__/     +^^</span><span class=\"se\">\\n</span><span class=\"s1\">         (     ,/    (^))^))  )  ) ))^^^^^^^))^^)       _)</span><span class=\"se\">\\n</span><span class=\"s1\">          *+__+*       (_))^)  ) ) ))^^^^^^))^^^^^)____*^</span><span class=\"se\">\\n</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">             </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_)^)_)) ))^^^^^^^^^^))^^^^)</span><span class=\"se\">\\n</span><span class=\"s1\">           (_             ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__^^^^^^^^^^^^))^^^^^^^)</span><span class=\"se\">\\n</span><span class=\"s1\">             ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">___            ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">__^^^^^^))^^^^^^^^)</span><span class=\"se\">\\\\\\\\\\\\\\\\\\n</span><span class=\"s1\">                  ^^^^^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">uuu/^^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">uuu/^^^^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\\\n</span><span class=\"s1\">                     ___) &gt;____) &gt;___   ^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">)</span><span class=\"se\">\\n</span><span class=\"s1\">                    ^^^//</span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s1\">_^^//</span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s1\">_^       ^(</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">)</span><span class=\"se\">\\n</span><span class=\"s1\">                     ^^^ ^^ ^^^ ^</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.turtle", "modulename": "cowsay.main", "qualname": "turtle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">  </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">   </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">                                ___-------___</span><span class=\"se\">\\n</span><span class=\"s1\">                            _-~~             ~~-_</span><span class=\"se\">\\n</span><span class=\"s1\">                         _-~                    /~-_</span><span class=\"se\">\\n</span><span class=\"s1\">       /^</span><span class=\"se\">\\\\</span><span class=\"s1\">__/^</span><span class=\"se\">\\\\</span><span class=\"s1\">         /~  </span><span class=\"se\">\\\\</span><span class=\"s1\">                   /    </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     /|  O|| O|        /      </span><span class=\"se\">\\\\</span><span class=\"s1\">_______________/        </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    | |___||__|      /       /                </span><span class=\"se\">\\\\</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    |          </span><span class=\"se\">\\\\</span><span class=\"s1\">    /      /                    </span><span class=\"se\">\\\\</span><span class=\"s1\">          </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    |   (_______) /______/                        </span><span class=\"se\">\\\\</span><span class=\"s1\">_________ </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">    |         / /         </span><span class=\"se\">\\\\</span><span class=\"s1\">                      /            </span><span class=\"se\">\\\\\\n</span><span class=\"s1\">     </span><span class=\"se\">\\\\</span><span class=\"s1\">         </span><span class=\"se\">\\\\</span><span class=\"s1\">^</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">         </span><span class=\"se\">\\\\</span><span class=\"s1\">                  /               </span><span class=\"se\">\\\\</span><span class=\"s1\">     /</span><span class=\"se\">\\n</span><span class=\"s1\">       </span><span class=\"se\">\\\\</span><span class=\"s1\">         ||           </span><span class=\"se\">\\\\</span><span class=\"s1\">______________/      _-_       //</span><span class=\"se\">\\\\</span><span class=\"s1\">__//</span><span class=\"se\">\\n</span><span class=\"s1\">         </span><span class=\"se\">\\\\</span><span class=\"s1\">       ||------_-~~-_ ------------- </span><span class=\"se\">\\\\</span><span class=\"s1\"> --/~   ~</span><span class=\"se\">\\\\</span><span class=\"s1\">    || __/</span><span class=\"se\">\\n</span><span class=\"s1\">           ~-----||====/~     |==================|       |/~~~~~</span><span class=\"se\">\\n</span><span class=\"s1\">            (_(__/  ./     /                    </span><span class=\"se\">\\\\</span><span class=\"s1\">_</span><span class=\"se\">\\\\</span><span class=\"s1\">      </span><span class=\"se\">\\\\</span><span class=\"s1\">.</span><span class=\"se\">\\n</span><span class=\"s1\">                   (_(___/                         </span><span class=\"se\">\\\\</span><span class=\"s1\">_____)_)</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.main.tux", "modulename": "cowsay.main", "qualname": "tux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span>,</span><span class=\"param\">\t<span class=\"n\">char_lines</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">     </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">      </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">       </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">        .--.</span><span class=\"se\">\\n</span><span class=\"s2\">       |o_o |</span><span class=\"se\">\\n</span><span class=\"s2\">       |:_/ |</span><span class=\"se\">\\n</span><span class=\"s2\">      //   </span><span class=\"se\">\\\\</span><span class=\"s2\"> </span><span class=\"se\">\\\\\\n</span><span class=\"s2\">     (|     | )</span><span class=\"se\">\\n</span><span class=\"s2\">    /&#39;</span><span class=\"se\">\\\\</span><span class=\"s2\">_   _/`</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">    </span><span class=\"se\">\\\\</span><span class=\"s2\">___)=(___/</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test", "modulename": "cowsay.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cowsay.test.capture_output", "modulename": "cowsay.test", "qualname": "capture_output", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span>, </span><span class=\"param\"><span class=\"n\">arguments</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.delete_empty_lines", "modulename": "cowsay.test", "qualname": "delete_empty_lines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.debug_diff", "modulename": "cowsay.test", "qualname": "debug_diff", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">solution</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay", "modulename": "cowsay.test", "qualname": "TestCowsay", "kind": "class", "doc": "<p>Test Class for <code>cowsay</code></p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "cowsay.test.TestCowsay.test_beavis", "modulename": "cowsay.test", "qualname": "TestCowsay.test_beavis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_cheese", "modulename": "cowsay.test", "qualname": "TestCowsay.test_cheese", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_cow", "modulename": "cowsay.test", "qualname": "TestCowsay.test_cow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_dragon", "modulename": "cowsay.test", "qualname": "TestCowsay.test_dragon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_fox", "modulename": "cowsay.test", "qualname": "TestCowsay.test_fox", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_ghostbusters", "modulename": "cowsay.test", "qualname": "TestCowsay.test_ghostbusters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_kitty", "modulename": "cowsay.test", "qualname": "TestCowsay.test_kitty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_meow", "modulename": "cowsay.test", "qualname": "TestCowsay.test_meow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_miki", "modulename": "cowsay.test", "qualname": "TestCowsay.test_miki", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_milk", "modulename": "cowsay.test", "qualname": "TestCowsay.test_milk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_pig", "modulename": "cowsay.test", "qualname": "TestCowsay.test_pig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_stegosaurus", "modulename": "cowsay.test", "qualname": "TestCowsay.test_stegosaurus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_stimpy", "modulename": "cowsay.test", "qualname": "TestCowsay.test_stimpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_trex", "modulename": "cowsay.test", "qualname": "TestCowsay.test_trex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_turkey", "modulename": "cowsay.test", "qualname": "TestCowsay.test_turkey", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_turtle", "modulename": "cowsay.test", "qualname": "TestCowsay.test_turtle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cowsay.test.TestCowsay.test_tux", "modulename": "cowsay.test", "qualname": "TestCowsay.test_tux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();